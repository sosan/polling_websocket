// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ZitadelClient is an autogenerated mock type for the ZitadelClient type
type ZitadelClient struct {
	mock.Mock
}

// GenerateActionUserAccessToken provides a mock function with given fields: jwt
func (_m *ZitadelClient) GenerateActionUserAccessToken(jwt string) (*string, time.Duration, error) {
	ret := _m.Called(jwt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateActionUserAccessToken")
	}

	var r0 *string
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*string, time.Duration, error)); ok {
		return rf(jwt)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(jwt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) time.Duration); ok {
		r1 = rf(jwt)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(jwt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateActionUserAccessToken provides a mock function with given fields: userToken, introspectJWT
func (_m *ZitadelClient) ValidateActionUserAccessToken(userToken *string, introspectJWT *string) (bool, error) {
	ret := _m.Called(userToken, introspectJWT)

	if len(ret) == 0 {
		panic("no return value specified for ValidateActionUserAccessToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string) (bool, error)); ok {
		return rf(userToken, introspectJWT)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) bool); ok {
		r0 = rf(userToken, introspectJWT)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(userToken, introspectJWT)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUserToken provides a mock function with given fields: userToken, introspectJWT
func (_m *ZitadelClient) ValidateUserToken(userToken string, introspectJWT string) (bool, int64, error) {
	ret := _m.Called(userToken, introspectJWT)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserToken")
	}

	var r0 bool
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, int64, error)); ok {
		return rf(userToken, introspectJWT)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userToken, introspectJWT)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) int64); ok {
		r1 = rf(userToken, introspectJWT)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(userToken, introspectJWT)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewZitadelClient creates a new instance of ZitadelClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZitadelClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZitadelClient {
	mock := &ZitadelClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
