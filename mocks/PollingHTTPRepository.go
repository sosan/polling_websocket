// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "polling_websocket/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// PollingHTTPRepository is an autogenerated mock type for the PollingHTTPRepository type
type PollingHTTPRepository struct {
	mock.Mock
}

// GetActionByID provides a mock function with given fields: actionID, userID, commandType, limitCount
func (_m *PollingHTTPRepository) GetActionByID(actionID *string, userID *string, commandType string, limitCount uint64) (*models.ResponsePollingActionID, error) {
	ret := _m.Called(actionID, userID, commandType, limitCount)

	if len(ret) == 0 {
		panic("no return value specified for GetActionByID")
	}

	var r0 *models.ResponsePollingActionID
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string, string, uint64) (*models.ResponsePollingActionID, error)); ok {
		return rf(actionID, userID, commandType, limitCount)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, string, uint64) *models.ResponsePollingActionID); ok {
		r0 = rf(actionID, userID, commandType, limitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponsePollingActionID)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, string, uint64) error); ok {
		r1 = rf(actionID, userID, commandType, limitCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPollingHTTPRepository creates a new instance of PollingHTTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollingHTTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollingHTTPRepository {
	mock := &PollingHTTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
