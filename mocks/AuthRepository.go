// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	tokenrepo "polling_websocket/pkg/infra/tokenrepo"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with no fields
func (_m *AuthRepository) GenerateAccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateIntrospectJWT provides a mock function with given fields: duration
func (_m *AuthRepository) GenerateIntrospectJWT(duration time.Duration) string {
	ret := _m.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateIntrospectJWT")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Duration) string); ok {
		r0 = rf(duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// VerifyActionUserToken provides a mock function with given fields: token
func (_m *AuthRepository) VerifyActionUserToken(token string) (bool, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyActionUserToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserToken provides a mock function with given fields: userToken
func (_m *AuthRepository) VerifyUserToken(userToken string) (bool, bool) {
	ret := _m.Called(userToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserToken")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (bool, bool)); ok {
		return rf(userToken)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(userToken)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// verifyWithIDProvider provides a mock function with given fields: token
func (_m *AuthRepository) verifyWithIDProvider(token *tokenrepo.Token) (bool, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for verifyWithIDProvider")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*tokenrepo.Token) (bool, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*tokenrepo.Token) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*tokenrepo.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
