// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	tokenrepo "polling_websocket/pkg/infra/tokenrepo"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// GetToken provides a mock function with no fields
func (_m *TokenRepository) GetToken() (*tokenrepo.Token, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *tokenrepo.Token
	var r1 error
	if rf, ok := ret.Get(0).(func() (*tokenrepo.Token, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *tokenrepo.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokenrepo.Token)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: accessToken, expiresIn
func (_m *TokenRepository) SaveToken(accessToken *string, expiresIn *time.Duration) error {
	ret := _m.Called(accessToken, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *time.Duration) error); ok {
		r0 = rf(accessToken, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
